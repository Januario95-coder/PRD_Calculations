# Generated by Django 3.1.4 on 2021-01-14 14:30

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('webapp', '0008_auto_20210114_1430'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicableOverpressureDemandCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Over_pressure_demand_case', models.CharField(choices=[('fire', '1. Fire'), ('loss_of_cooling_water', '2. Loss of cooling water utility'), ('electrical_power_supply_failure', '3. Electrical power supply failure'), ('blockage_discharge_with_admin_controls', '4. Blockage discharge with administrative controls in place'), ('blockage_discharge_without_admin_controls', '5. Blockage discharge without administrative controls'), ('control_valve_failure_initiating_event_is_same_direction_as_cv', '6. Control valve failure, initiating event is same direction as CV normal fail position (i.e. fail safe)'), ('control_valve_failure_initiating_event_is_opposite_direction_as_cv', '7. Control valve failure, initiating event is opposite direction as CV normal fail posiion (i.e. fail opposite)'), ('runaway_chemical_reaction', '8. Runaway chemical reaction'), ('heat_exchanger_tube_rupture', '9. Heat exchanger tube rupture'), ('tower_p/a_or_reflux_pump_failures', '10. Tower P/A or reflux pump failures'), ('thermal_relief_with_admini_controls', '11. Thermal relief with administrative controls in place'), ('thermal_relief_without_admin_controls', '12. Thermal relief without administrative controls'), ('liquid_overfilling_with_admin_controls', '13. Liquid overfilling with administrative controls in place'), ('liquid_overfilling_without_admin_controls', '14. Liquid overfilling without administrative controls')], default='fire', max_length=100)),
                ('Overpressure_associated_with_the_overpressure', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('PRD_COF_to_open_associated_with_jth_overpressure', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Consequences0fFailureOfLeakage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Rated_Capacity_of_PRD', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('PRD_Inlet_Size', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('Cost_of_the_fluid', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('Environmental_clean_up_costs_due_to_a_PRD_leakage', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('PRD_leakage_can_be_tolered', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='no', max_length=14)),
                ('Cost_of_shutdown_to_repair_PRD', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('Daily_production_margin_on_the_unit', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('Days_required_to_shutdown_a_unit_to_repair_a_leakage', models.DecimalField(decimal_places=3, default=1.0, max_digits=10)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ConsequencesOfFailureInputData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Multiple_PRDs_protecting_fixed_equipment', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='yes', max_length=14)),
                ('Orifice_area_of_the_PRD', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('Total_installed_orifice_area_of_a_multiple_PDRs_installation', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='EnvironmentFactorModifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Environment_Factor_Modifier', models.CharField(choices=[('99.33 °C < T < 260 °C', 'Operating temperatures 99.33 °C < T < 260 °C'), ('> 260 °C', 'Operating temperature > 260 °C'), ('>_90%_spring-loaded_or_>_95%_pilot-operated', 'Operating ratio > 90%\\ for spring-loaded PRVs or > 95% for pilot operated'), ('installed_piping_vibration', 'Installed piping vibration'), ('pulsating_or_cyclical_service', 'Pulsating or cyclical service such as downstream of positive displacement rotating equipment'), ('history_of_excessive_actuation', 'History of excessive actuation in service (greater than 5 times per year'), ('history_of_chatter', 'History of chatter')], default='99.33 °C < T < 260 °C', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRD_identification_number', models.CharField(max_length=10)),
                ('PRD_function', models.CharField(max_length=150)),
                ('Installation_of_PRD', models.DateField(default=datetime.datetime.now)),
                ('RBI_assessment_date', models.DateField(default=datetime.datetime.now)),
                ('Type_of_PRD', models.CharField(choices=[('convention_spring_loaded', 'Convention Spring-Loaded'), ('balanced_bellows', 'Balanced Bellows'), ('pilot_operated', 'Pilot Operated'), ('Rupture_disk_only', 'Rupture Disk Only')], default='convention_spring_loaded', max_length=25)),
                ('PRD_Containing_Soft_Seats', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='no', max_length=15)),
                ('PRD_set', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('Service_severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], default='mild', max_length=15)),
                ('PRD_Discharge_Location', models.CharField(choices=[('atmosphere', 'Atmosphere'), ('flare', 'Flare'), ('closed_process', 'Closed Process')], default='atmosphere', max_length=25)),
                ('Environment_Factor_Modifier', models.CharField(choices=[('99.33 °C < T < 260 °C', 'Operating temperatures 99.33 °C < T < 260 °C'), ('> 260 °C', 'Operating temperature > 260 °C'), ('>_90%_spring-loaded_or_>_95%_pilot-operated', 'Operating ratio > 90%\\ for spring-loaded PRVs or > 95% for pilot operated'), ('installed_piping_vibration', 'Installed piping vibration'), ('pulsating_or_cyclical_service', 'Pulsating or cyclical service such as downstream of positive displacement rotating equipment'), ('history_of_excessive_actuation', 'History of excessive actuation in service (greater than 5 times per year'), ('history_of_chatter', 'History of chatter')], default='99.33 °C < T < 260 °C', max_length=100)),
                ('Rupture_disk_is_installed_upstream_of_PRD', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='no', max_length=13)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='OverPressureDemandCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Over_pressure_demand_case', models.CharField(choices=[('fire', '1. Fire'), ('loss_of_cooling_water', '2. Loss of cooling water utility'), ('electrical_power_supply_failure', '3. Electrical power supply failure'), ('blockage_discharge_with_admin_controls', '4. Blockage discharge with administrative controls in place'), ('blockage_discharge_without_admin_controls', '5. Blockage discharge without administrative controls'), ('control_valve_failure_initiating_event_is_same_direction_as_cv', '6. Control valve failure, initiating event is same direction as CV normal fail position (i.e. fail safe)'), ('control_valve_failure_initiating_event_is_opposite_direction_as_cv', '7. Control valve failure, initiating event is opposite direction as CV normal fail posiion (i.e. fail opposite)'), ('runaway_chemical_reaction', '8. Runaway chemical reaction'), ('heat_exchanger_tube_rupture', '9. Heat exchanger tube rupture'), ('tower_p/a_or_reflux_pump_failures', '10. Tower P/A or reflux pump failures'), ('thermal_relief_with_admini_controls', '11. Thermal relief with administrative controls in place'), ('thermal_relief_without_admin_controls', '12. Thermal relief without administrative controls'), ('liquid_overfilling_with_admin_controls', '13. Liquid overfilling with administrative controls in place'), ('liquid_overfilling_without_admin_controls', '14. Liquid overfilling without administrative controls')], default='fire', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Prd_InspectionHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('RBI_inspection_test_date', models.DateField(blank=True, null=True)),
                ('PRD_pop_test_results', models.CharField(choices=[('none', 'None'), ('pass', 'Pass'), ('fail', 'Fail')], default='fire', max_length=15)),
                ('PRD_Leakage_results', models.CharField(choices=[('none', 'None'), ('leak', 'Leak'), ('no_leak', 'No Leak')], default='pass', max_length=15)),
                ('PRD_Inspection_Effectiveness', models.CharField(choices=[('none', 'None'), ('highly_effective', 'Highly Effective'), ('usually_effective', 'Usually Effective'), ('faily_effective', 'Faily Effective'), ('highly_ineffective', 'Ineffective')], default='highly_effective', max_length=30)),
                ('PRD_Overhauled_during_the_inspection', models.CharField(choices=[('none', 'None'), ('yes', 'Yes'), ('no', 'No')], default='yes', max_length=14)),
                ('PRD_replace_with_new_PRD_in_lieu_of_overhaul', models.CharField(choices=[('none', 'None'), ('yes', 'Yes'), ('no', 'No')], default='no', max_length=14)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PRDDischargeLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRD_Discharge_Location', models.CharField(choices=[('atmosphere', 'Atmosphere'), ('flare', 'Flare'), ('closed_process', 'Closed Process')], default='atmosphere', max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='PrdInspection_TestHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Fixed_Equipment_Protected_by_PRD', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='yes', max_length=20)),
                ('Protected_Equipment_Demage_Status', models.CharField(choices=[('none', 'None'), ('minimal', 'Minimal'), ('minor', 'Minor'), ('moderate', 'Moderate'), ('severe', 'Severe')], default='none', max_length=15)),
                ('Maximum_Allow_able_Working_Pressure_of_Protected_Equipment', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('Operating_Pressure_of_the_Protected_Equipment', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('management_system_factor', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PRDInspectionEffectiveness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRD_Inspection_Effectiveness', models.CharField(choices=[('none', 'None'), ('highly_effective', 'Highly Effective'), ('usually_effective', 'Usually Effective'), ('faily_effective', 'Faily Effective'), ('highly_ineffective', 'Ineffective')], default='highly_effective', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='ProtectedEquipmentDemageStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Protected_Equipment_Demage_Status', models.CharField(choices=[('none', 'None'), ('minimal', 'Minimal'), ('minor', 'Minor'), ('moderate', 'Moderate'), ('severe', 'Severe')], default='none', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceSeverity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Service_severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], default='mild', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='TypeOfPRD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Type_of_PRD', models.CharField(choices=[('convention_spring_loaded', 'Convention Spring-Loaded'), ('balanced_bellows', 'Balanced Bellows'), ('pilot_operated', 'Pilot Operated'), ('Rupture_disk_only', 'Rupture Disk Only')], default='convention_spring_loaded', max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='SelectField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Environment_Factor_Modifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.environmentfactormodifier')),
                ('OverPressureDemandCase', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='webapp.overpressuredemandcase')),
                ('PRDInspectionEffectiveness', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='webapp.prdinspectioneffectiveness')),
                ('PRD_Discharge_Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.prddischargelocation')),
                ('ProtectedEquipmentDemageStatus', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='webapp.protectedequipmentdemagestatus')),
                ('Service_severity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.serviceseverity')),
                ('Type_of_PRD', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.typeofprd')),
            ],
        ),
    ]
