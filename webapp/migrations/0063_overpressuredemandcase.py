# Generated by Django 3.1.1 on 2020-12-15 07:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webapp', '0062_prdinspectioneffectiveness'),
    ]

    operations = [
        migrations.CreateModel(
            name='OverPressureDemandCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Over_pressure_demand_case', models.CharField(choices=[('fire', '1. Fire'), ('loss_of_cooling_water', '2. Loss of cooling water utility'), ('electrical_power_supply_failure', '3. Electrical power supply failure'), ('blockage_discharge_with_admin_controls', '4. Blockage discharge with administrative controls in place'), ('blockage_discharge_without_admin_controls', '5. Blockage discharge without administrative controls'), ('control_valve_failure_initiating_event_is_same_direction_as_cv', '6. Control valve failure, initiating event is same direction as CV normal fail position (i.e. fail safe)'), ('control_valve_failure_initiating_event_is_opposite_direction_as_cv', '7. Control valve failure, initiating event is opposite direction as CV normal fail posiion (i.e. fail opposite)'), ('runaway_chemical_reaction', '8. Runaway chemical reaction'), ('heat_exchanger_tube_rupture', '9. Heat exchanger tube rupture'), ('tower_p/a_or_reflux_pump_failures', '10. Tower P/A or reflux pump failures'), ('thermal_relief_with_admini_controls', '11. Thermal relief with administrative controls in place'), ('thermal_relief_without_admin_controls', '12. Thermal relief without administrative controls'), ('liquid_overfilling_with_admin_controls', '13. Liquid overfilling with administrative controls in place'), ('liquid_overfilling_without_admin_controls', '14. Liquid overfilling without administrative controls')], default='fire', max_length=100)),
            ],
        ),
    ]
